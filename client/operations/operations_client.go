package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteSetSet deletes a set
*/
func (a *Client) DeleteSetSet(params *DeleteSetSetParams) (*DeleteSetSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSetSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSetSet",
		Method:             "DELETE",
		PathPattern:        "/set/{set}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSetSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSetSetOK), nil

}

/*
GetBackup produces a d b backup
*/
func (a *Client) GetBackup(params *GetBackupParams) (*GetBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBackupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBackup",
		Method:             "GET",
		PathPattern:        "/backup",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBackupOK), nil

}

/*
GetDiscover performs a discovery request
*/
func (a *Client) GetDiscover(params *GetDiscoverParams) (*GetDiscoverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDiscoverParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetDiscover",
		Method:             "GET",
		PathPattern:        "/discover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDiscoverReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDiscoverOK), nil

}

/*
GetSetSet retrieves the query or nodes for a set
*/
func (a *Client) GetSetSet(params *GetSetSetParams) (*GetSetSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSetSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSetSet",
		Method:             "GET",
		PathPattern:        "/set/{set}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSetSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSetSetOK), nil

}

/*
GetSets retrieves list of known sets
*/
func (a *Client) GetSets(params *GetSetsParams) (*GetSetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSets",
		Method:             "GET",
		PathPattern:        "/sets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSetsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSetsOK), nil

}

/*
PostSet creates a new set
*/
func (a *Client) PostSet(params *PostSetParams) (*PostSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSet",
		Method:             "POST",
		PathPattern:        "/set",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSetOK), nil

}

/*
PutSetSet updates a set
*/
func (a *Client) PutSetSet(params *PutSetSetParams) (*PutSetSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSetSetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutSetSet",
		Method:             "PUT",
		PathPattern:        "/set/{set}",
		ProducesMediaTypes: []string{"appilcation/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutSetSetReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSetSetOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
