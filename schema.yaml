swagger: '2.0'
info:
  title: Choria Discovery API
  description: API to do Choria Discovery via REST services
  version: 1.0.0
basePath: /v1
schemes:
  - https
produces:
  - application/json
paths:
  /discover:
    get:
      summary: Perform a discovery request
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: request
          in: body
          description: Filter description
          required: true
          schema:
            $ref: '#/definitions/discoveryRequest'
      responses:
        '200':
          $ref: '#/responses/nodes'
        '400':
          $ref: '#/responses/error'
  '/set/{set}':
    get:
      summary: Retrieves the query or nodes for a set
      produces:
        - application/json
      parameters:
        - name: set
          in: path
          description: Node set to retrieve
          required: true
          type: string
        - name: discover
          in: query
          description: Also include the matching nodes if the set is a PQL query
          type: boolean
          default: false
      responses:
        '200':
          $ref: '#/responses/set'
        '404':
          description: Not found
        '500':
          $ref: '#/responses/error'
    delete:
      summary: Delete a set
      produces:
        - application/json
      parameters:
        - name: set
          in: path
          description: Node set to delete
          required: true
          type: string
      responses:
        '200':
          $ref: '#/responses/success'
        '404':
          description: Not found
        '500':
          $ref: '#/responses/error'
    put:
      summary: Update a set
      produces:
        - appilcation/json
      consumes:
        - application/json
      parameters:
        - name: set
          in: path
          description: Node set to retrieve
          required: true
          type: string
        - name: newSet
          in: body
          description: Set Properties
          required: true
          schema:
            $ref: '#/definitions/set'
      responses:
        '200':
          $ref: '#/responses/success'
        '404':
          description: Not found
        '500':
          $ref: '#/responses/error'
  /set:
    post:
      summary: Create a new set
      produces:
        - application/json
      consumes:
        - application/json
      parameters:
        - name: set
          in: body
          description: Node set to store
          required: true
          schema:
            $ref: '#/definitions/set'
      responses:
        '200':
          $ref: '#/responses/success'
        '400':
          $ref: '#/responses/error'
        '500':
          $ref: '#/responses/error'
  /sets:
    get:
      summary: Retrieve list of known sets
      produces:
        - application/json
      consumes:
        - application/json
      responses:
        '200':
          $ref: '#/responses/sets'
  /backup:
    get:
      summary: Produce a DB backup
      produces:
        - application/octet-stream
      responses:
        '200':
          $ref: '#/responses/success'
        '500':
          $ref: '#/responses/error'
responses:
  error:
    description: Standard Error Format
    schema:
      $ref: '#/definitions/errorModel'
  nodes:
    description: Basic successful discovery request
    schema:
      $ref: '#/definitions/discoverySuccessModel'
  set:
    description: Node Set
    schema:
      $ref: '#/definitions/set'
  sets:
    description: Known Sets
    schema:
      $ref: '#/definitions/sets'
  success:
    description: Basic successful request
    schema:
      $ref: '#/definitions/successModel'
definitions:
  discoverySuccessModel:
    type: object
    additionalProperties: false
    properties:
      code:
        type: integer
        description: HTTP Status Code
      nodes:
        type: array
        items:
          type: string
  errorModel:
    type: object
    additionalProperties: false
    properties:
      code:
        type: integer
        description: HTTP Status Code
      message:
        type: string
        description: Short description of the problem
  successModel:
    type: object
    properties:
      code:
        type: integer
        description: HTTP Status Code
      message:
        type: string
  set:
    type: object
    required:
      - set
      - query
    properties:
      set:
        $ref: '#/definitions/word'
      query:
        type: string
        minLength: 1
      nodes:
        type: array
        items:
          type: string
  sets:
    type: object
    properties:
      code:
        type: integer
        description: HTTP Status Code
      sets:
        type: array
        items:
          $ref: '#/definitions/word'
          
  collectiveFilter:
    $ref: '#/definitions/word'
  word:
    type: string
    minLength: 1
    pattern: '^[a-zA-Z0-9_\-\.]+$'
  wordOrRegex:
    type: string
    minLength: 1
    pattern: '^((\\/[a-zA-Z0-9\\.\\-_]+\/)|([a-zA-Z][a-zA-Z0-9\\.\\-_]+))$'
  factFilter:
    type: object
    required:
      - fact
      - operator
      - value
    properties:
      fact:
        $ref: '#/definitions/word'
      operator:
        type: string
        enum:
          - ==
          - =~
          - '!='
          - '>='
          - '>'
          - <=
          - <
      value:
        $ref: '#/definitions/wordOrRegex'
  factsFilter:
    type: array
    items:
      $ref: '#/definitions/factFilter'
  identitiesFilter:
    type: array
    items:
      $ref: '#/definitions/wordOrRegex'
  agentsFilter:
    type: array
    items:
      $ref: '#/definitions/wordOrRegex'
  classesFilter:
    type: array
    items:
      $ref: '#/definitions/wordOrRegex'
  discoveryRequest:
    type: object
    properties:
      facts:
        $ref: '#/definitions/factsFilter'
      classes:
        $ref: '#/definitions/classesFilter'
      agents:
        $ref: '#/definitions/agentsFilter'
      identities:
        $ref: '#/definitions/identitiesFilter'
      collective:
        $ref: '#/definitions/collectiveFilter'
      query:
        description: PQL Query
        type: string
        minLength: 1
