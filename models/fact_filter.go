package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FactFilter fact filter
// swagger:model factFilter
type FactFilter struct {

	// fact
	// Required: true
	Fact Word `json:"fact"`

	// operator
	// Required: true
	Operator *string `json:"operator"`

	// value
	// Required: true
	Value WordOrRegex `json:"value"`
}

// Validate validates this fact filter
func (m *FactFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFact(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOperator(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FactFilter) validateFact(formats strfmt.Registry) error {

	if err := m.Fact.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fact")
		}
		return err
	}

	return nil
}

var factFilterTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["==","=~","!=","\u003e=","\u003e","\u003c=","\u003c"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		factFilterTypeOperatorPropEnum = append(factFilterTypeOperatorPropEnum, v)
	}
}

const (
	// FactFilterOperatorEq captures enum value "=="
	FactFilterOperatorEq string = "=="
	// FactFilterOperatorRe captures enum value "=~"
	FactFilterOperatorRe string = "=~"
	// FactFilterOperatorNrBang captures enum value "!="
	FactFilterOperatorNrBang string = "!="
	// FactFilterOperatorGe captures enum value ">="
	FactFilterOperatorGe string = ">="
	// FactFilterOperatorGt captures enum value ">"
	FactFilterOperatorGt string = ">"
	// FactFilterOperatorLe captures enum value "<="
	FactFilterOperatorLe string = "<="
	// FactFilterOperatorLt captures enum value "<"
	FactFilterOperatorLt string = "<"
)

// prop value enum
func (m *FactFilter) validateOperatorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, factFilterTypeOperatorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FactFilter) validateOperator(formats strfmt.Registry) error {

	if err := validate.Required("operator", "body", m.Operator); err != nil {
		return err
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", *m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *FactFilter) validateValue(formats strfmt.Registry) error {

	if err := m.Value.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("value")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FactFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FactFilter) UnmarshalBinary(b []byte) error {
	var res FactFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
