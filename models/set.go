package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Set set
// swagger:model set
type Set struct {

	// nodes
	Nodes []string `json:"nodes"`

	// query
	// Required: true
	// Min Length: 1
	Query *string `json:"query"`

	// set
	// Required: true
	Set Word `json:"set"`
}

// Validate validates this set
func (m *Set) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNodes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSet(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Set) validateNodes(formats strfmt.Registry) error {

	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	return nil
}

func (m *Set) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	if err := validate.MinLength("query", "body", string(*m.Query), 1); err != nil {
		return err
	}

	return nil
}

func (m *Set) validateSet(formats strfmt.Registry) error {

	if err := m.Set.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("set")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Set) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Set) UnmarshalBinary(b []byte) error {
	var res Set
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
