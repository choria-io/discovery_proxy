package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSetSetParams creates a new GetSetSetParams object
// with the default values initialized.
func NewGetSetSetParams() GetSetSetParams {
	var (
		discoverDefault = bool(false)
	)
	return GetSetSetParams{
		Discover: &discoverDefault,
	}
}

// GetSetSetParams contains all the bound params for the get set set operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetSetSet
type GetSetSetParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*Also include the matching nodes if the set is a PQL query
	  In: query
	  Default: false
	*/
	Discover *bool
	/*Node set to retrieve
	  Required: true
	  In: path
	*/
	Set string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *GetSetSetParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDiscover, qhkDiscover, _ := qs.GetOK("discover")
	if err := o.bindDiscover(qDiscover, qhkDiscover, route.Formats); err != nil {
		res = append(res, err)
	}

	rSet, rhkSet, _ := route.Params.GetOK("set")
	if err := o.bindSet(rSet, rhkSet, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSetSetParams) bindDiscover(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		var discoverDefault bool = bool(false)
		o.Discover = &discoverDefault
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("discover", "query", "bool", raw)
	}
	o.Discover = &value

	return nil
}

func (o *GetSetSetParams) bindSet(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	o.Set = raw

	return nil
}
