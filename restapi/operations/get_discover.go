package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDiscoverHandlerFunc turns a function with the right signature into a get discover handler
type GetDiscoverHandlerFunc func(GetDiscoverParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDiscoverHandlerFunc) Handle(params GetDiscoverParams) middleware.Responder {
	return fn(params)
}

// GetDiscoverHandler interface for that can handle valid get discover params
type GetDiscoverHandler interface {
	Handle(GetDiscoverParams) middleware.Responder
}

// NewGetDiscover creates a new http.Handler for the get discover operation
func NewGetDiscover(ctx *middleware.Context, handler GetDiscoverHandler) *GetDiscover {
	return &GetDiscover{Context: ctx, Handler: handler}
}

/*GetDiscover swagger:route GET /discover getDiscover

Perform a discovery request

*/
type GetDiscover struct {
	Context *middleware.Context
	Handler GetDiscoverHandler
}

func (o *GetDiscover) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetDiscoverParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
