// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteSetSetHandlerFunc turns a function with the right signature into a delete set set handler
type DeleteSetSetHandlerFunc func(DeleteSetSetParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteSetSetHandlerFunc) Handle(params DeleteSetSetParams) middleware.Responder {
	return fn(params)
}

// DeleteSetSetHandler interface for that can handle valid delete set set params
type DeleteSetSetHandler interface {
	Handle(DeleteSetSetParams) middleware.Responder
}

// NewDeleteSetSet creates a new http.Handler for the delete set set operation
func NewDeleteSetSet(ctx *middleware.Context, handler DeleteSetSetHandler) *DeleteSetSet {
	return &DeleteSetSet{Context: ctx, Handler: handler}
}

/*DeleteSetSet swagger:route DELETE /set/{set} deleteSetSet

Delete a set

*/
type DeleteSetSet struct {
	Context *middleware.Context
	Handler DeleteSetSetHandler
}

func (o *DeleteSetSet) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteSetSetParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
