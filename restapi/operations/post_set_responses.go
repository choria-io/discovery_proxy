package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/choria-io/pdbproxy/models"
)

// PostSetOKCode is the HTTP code returned for type PostSetOK
const PostSetOKCode int = 200

/*PostSetOK Node Set

swagger:response postSetOK
*/
type PostSetOK struct {

	/*
	  In: Body
	*/
	Payload *models.Set `json:"body,omitempty"`
}

// NewPostSetOK creates PostSetOK with default headers values
func NewPostSetOK() *PostSetOK {
	return &PostSetOK{}
}

// WithPayload adds the payload to the post set o k response
func (o *PostSetOK) WithPayload(payload *models.Set) *PostSetOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post set o k response
func (o *PostSetOK) SetPayload(payload *models.Set) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSetOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostSetBadRequestCode is the HTTP code returned for type PostSetBadRequest
const PostSetBadRequestCode int = 400

/*PostSetBadRequest Standard Error Format

swagger:response postSetBadRequest
*/
type PostSetBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorModel `json:"body,omitempty"`
}

// NewPostSetBadRequest creates PostSetBadRequest with default headers values
func NewPostSetBadRequest() *PostSetBadRequest {
	return &PostSetBadRequest{}
}

// WithPayload adds the payload to the post set bad request response
func (o *PostSetBadRequest) WithPayload(payload *models.ErrorModel) *PostSetBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post set bad request response
func (o *PostSetBadRequest) SetPayload(payload *models.ErrorModel) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostSetBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
